import sys
sys.path.append("C:\\Users\\AnnickDewald\\PycharmProjects\\AeroSandbox")
from aerosandbox.tools.pretty_plots import plt, sns, mpl, show_plot
import aerosandbox.numpy as np
from scipy import interpolate
import pandas as pd

def read_excel_data(excel_file):
    df = pd.read_excel(excel_file)
    return df.values.tolist()

excel_file = "cache/Wildfire/wildfire_runs.xlsx"
inputs = read_excel_data(excel_file)

run_num = 7
title1 = inputs[run_num][9]
title2 = inputs[run_num][10]

# Do raw imports
data = pd.read_csv(f"cache/Wildfire/run_{run_num}_payload_power.csv")
data.columns = data.columns.str.strip()
days_raw = np.array(data['Days'], dtype=float)
lats_raw = np.array(data['Latitudes'], dtype=float)
spans_raw = np.array(data['Payload Power'], dtype=float)

# # Add dummy points
# bad_points = [
#     (0, 80),
#     (0, 70),
#     (365, 80),
#     (365, 70),
#     (244, -80),
#     (244, -70),
# ]
# for p in bad_points:
#     days_raw = np.append(days_raw, p[0])
#     lats_raw = np.append(lats_raw, p[1])
#     spans_raw = np.append(spans_raw, 1000)

# # Filter by nan
nan = np.isnan(spans_raw)
# infeasible_value = 100  # Value to assign to NaNs and worse-than-this points
# spans_raw[nan] = infeasible_value
# spans_raw[spans_raw > infeasible_value] = infeasible_value
# nan = np.isnan(spans_raw)

# ### Payload plot
fig, ax = plt.subplots(1, 1, figsize=(8, 6), dpi=200)
kwargs = {
    "levels": np.arange(0, 500, 50),
    "alpha" : 0.7,
    "extend": "both",
}

viridis = mpl.cm.get_cmap('viridis_r', 256)
newcolors = viridis(np.linspace(0, 1, 256))
newcolors[-1, :] = np.array([0, 0, 0, 1])
newcmp = mpl.colors.ListedColormap(newcolors)

# CS = plt.contour(*args, **kwargs, colors="k", linewidths=0.5)
# CF = plt.contourf(*args, **kwargs, cmap=newcmp)
# ax.clabel(CS, inline=1, fontsize=10, fmt="%.0f m")

### Does unstructured linear interpolation; useful for checking RBF accuracy.
# args = [
#     days_raw[~nan],
#     lats_raw[~nan],
#     spans_raw[~nan]
# ]
# CS = plt.tricontour(*args, **kwargs, colors="k", linewidths=0.5)
# CF = plt.tricontourf(*args, **kwargs, cmap=newcmp)
# cbar = plt.colorbar(label="Wing Span [m]", extendrect=True)
# ax.clabel(CS, inline=1, fontsize=10, fmt="%.0f m")


plt.scatter(
    days_raw[~nan],
    lats_raw[~nan],
    c=spans_raw[~nan],
    cmap=newcmp,
    edgecolor="black",
    zorder=4
)
cbar = plt.colorbar(label="Payload Power [W]", extendrect=True)
ax.patch.set_facecolor(np.array([0, 0, 0, 1]))
ax.patch.set_alpha(0.3)
# plt.clim(*CS.get_clim())

#
plt.xticks(
    np.linspace(0, 365, 13)[:-1],
    (
        "Jan. 1",
        "Feb. 1",
        "Mar. 1",
        "Apr. 1",
        "May 1",
        "June 1",
        "July 1",
        "Aug. 1",
        "Sep. 1",
        "Oct. 1",
        "Nov. 1",
        "Dec. 1"
    ),
    rotation=40
)
plt.xticks(rotation=40)
plt.xlim(0, 365)
plt.ylim(-80, 80)
lat_label_vals = np.arange(-80, 80.1, 20)
lat_labels = []
for lat in lat_label_vals:
    if lat >= 0:
        lat_labels.append(f"{lat:.0f}N")
    else:
        lat_labels.append(f"{-lat:.0f}S")
plt.yticks(
    lat_label_vals,
    lat_labels
)

plt.suptitle(
    "Payload Power vs. Latitude and Day of Year\n",
    y=0.98
)
# plt.legend(loc='center')
plt.title(
    "\n".join([
        title1,
        title2
    ]),
    fontsize=10
)
plt.xlabel("Day of Year")
plt.ylabel("Latitude")
plt.tight_layout()
plt.savefig(f"cache/Wildfire/plot_{run_num}_payload_power.png")
plt.show()
# show_plot(
#     # xlabel="Day of Year",
#     # ylabel="Latitude",
#     show=True,
# )